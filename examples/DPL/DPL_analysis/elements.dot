digraph G {
	44 [label="Type: Line"];
	88 [label="Method: Main.windowClosing(WindowEvent)"];
	45 [label="Field: Line startPoint"];
	89 [label="MethodBody: public void windowClosing(WindowEvent e){   System.exit(0); } "];
	46 [label="Field: Line endPoint"];
	47 [label="Method: Line.paint(Graphics)"];
	48 [label="MethodBody: public void paint(Graphics g){   g.setColor(Color.BLACK);   g.drawLine(startPoint.x,startPoint.y,endPoint.x,endPoint.y); } "];
	49 [label="Method: Line.Line(Point)"];
	90 [label="Method: Main.main(String[])"];
	91 [label="MethodBody: /**   * main method   */ public static void main(String[] args){   new Main(\"Draw Product Line\"); } "];
	50 [label="MethodBody: public Line(Point start){   startPoint=start; } "];
	51 [label="Method: Line.setEnd(Point)"];
	52 [label="MethodBody: public void setEnd(Point end){   endPoint=end; } "];
	53 [label="Method: Line.getStart()"];
	10 [label="Field: Canvas start"];
	54 [label="MethodBody: public Point getStart(){   return startPoint; } "];
	11 [label="Field: Canvas end"];
	55 [label="Method: Line.getEnd()"];
	12 [label="Field: Canvas newLine"];
	56 [label="MethodBody: public Point getEnd(){   return endPoint; } "];
	13 [label="Field: Canvas figureSelected"];
	57 [label="CompilationUnit: defaultPackage Main.java"];
	14 [label="Method: Canvas.Canvas()"];
	58 [label="Import: defaultPackage Main.java javax.swing"];
	15 [label="MethodBody: /**   * Sets up the canvas. Do not change   */ public Canvas(){   this.setDoubleBuffered(true);   this.addMouseListener(this);   this.addMouseMotionListener(this); } "];
	59 [label="Import: defaultPackage Main.java java.awt"];
	16 [label="Method: Canvas.selectedFigure(FigureTypes)"];
	17 [label="MethodBody: /**   * Sets the selected figure. Do not change.   */ public void selectedFigure(FigureTypes fig){   figureSelected=fig; } "];
	18 [label="Method: Canvas.wipe()"];
	19 [label="MethodBody: public void wipe(){   this.lines.clear();   this.repaint(); } "];
	0 [label="CompilationUnit: defaultPackage Canvas.java"];
	1 [label="Import: defaultPackage Canvas.java java.awt.Color"];
	2 [label="Import: defaultPackage Canvas.java java.awt.Graphics"];
	3 [label="Import: defaultPackage Canvas.java java.awt.event.MouseEvent"];
	4 [label="Import: defaultPackage Canvas.java java.util"];
	5 [label="Import: defaultPackage Canvas.java java.awt.event"];
	6 [label="Import: defaultPackage Canvas.java javax.swing.JComponent"];
	7 [label="Import: defaultPackage Canvas.java java.awt.Point"];
	8 [label="Type: Canvas"];
	9 [label="Field: Canvas lines"];
	60 [label="Import: defaultPackage Main.java java.awt.event"];
	61 [label="Import: defaultPackage Main.java java.util.Vector"];
	62 [label="Type: Main"];
	63 [label="Field: Main WIDTH"];
	20 [label="Method: Canvas.paintComponent(Graphics)"];
	64 [label="Field: Main HEIGHT"];
	21 [label="MethodBody: /**   * Paints the component in turn. Call whenever repaint is called.   */ public void paintComponent(Graphics g){   super.paintComponent(g);   g.setColor(Color.WHITE);   g.fillRect(0,0,getWidth(),getHeight());   for (  Line l : lines) {     l.paint(g);   } } "];
	65 [label="Field: Main lineText"];
	22 [label="Method: Canvas.mouseClicked(MouseEvent)"];
	66 [label="Field: Main wipeText"];
	23 [label="MethodBody: public void mouseClicked(MouseEvent e){ } "];
	67 [label="Field: Main lineButton"];
	24 [label="Method: Canvas.mouseEntered(MouseEvent)"];
	68 [label="Field: Main wipeButton"];
	25 [label="MethodBody: public void mouseEntered(MouseEvent e){ } "];
	69 [label="Field: Main toolPanel"];
	26 [label="Method: Canvas.mouseExited(MouseEvent)"];
	27 [label="MethodBody: /**   * Invoked when the mouse exits a component. Empty implementation.  Do not change.   */ public void mouseExited(MouseEvent e){ } "];
	28 [label="Method: Canvas.mousePressed(MouseEvent)"];
	29 [label="MethodBody: /**   * Invoked when a mouse button has been pressed on a component.   */ public void mousePressed(MouseEvent e){ switch (figureSelected) { case LINE:     mousePressedLine(e);   break; } } "];
	70 [label="Field: Main canvas"];
	71 [label="Method: Main.initAtoms()"];
	72 [label="MethodBody: public void initAtoms(){   lineButton=new JButton(lineText);   wipeButton=new JButton(wipeText); } "];
	73 [label="Field: Main contentPane"];
	30 [label="Method: Canvas.mouseReleased(MouseEvent)"];
	74 [label="Method: Main.initLayout()"];
	31 [label="MethodBody: /**   * Invoked when a mouse button has been released on a component.   */ public void mouseReleased(MouseEvent e){ switch (figureSelected) { case LINE:     mouseReleasedLine(e);   break; } } "];
	75 [label="MethodBody: /**   * Initializes layout . No need to change   */ public void initLayout(){   contentPane=getContentPane();   contentPane.setLayout(new BorderLayout());   toolPanel.setLayout(new BoxLayout(toolPanel,BoxLayout.Y_AXIS)); } "];
	32 [label="Method: Canvas.mouseDragged(MouseEvent)"];
	76 [label="Method: Main.initContentPane()"];
	33 [label="MethodBody: /**   * Invoked when the mouse is dragged over a component   */ public void mouseDragged(MouseEvent e){ switch (figureSelected) { case LINE:     mouseDraggedLine(e);   break; } } "];
	77 [label="MethodBody: /**   * Initializes the content pane   */ public void initContentPane(){   toolPanel.add(lineButton);   toolPanel.add(wipeButton);   contentPane.add(toolPanel,BorderLayout.WEST);   contentPane.add(canvas,BorderLayout.CENTER); } "];
	34 [label="Method: Canvas.mouseMoved(MouseEvent)"];
	78 [label="Method: Main.initListeners()"];
	35 [label="MethodBody: public void mouseMoved(MouseEvent e){ } "];
	79 [label="MethodBody: /**   * Initializes the listeners for the buttons and the combo box   */ public void initListeners(){   lineButton.addActionListener(new ActionListener(){     public void actionPerformed(    ActionEvent e){       canvas.selectedFigure(Canvas.FigureTypes.LINE);     }   } );   wipeButton.addActionListener(new ActionListener(){     public void actionPerformed(    ActionEvent e){       canvas.wipe();     }   } ); } "];
	36 [label="Method: Canvas.mousePressedLine(MouseEvent)"];
	37 [label="MethodBody: public void mousePressedLine(MouseEvent e){   if (newLine == null) {     start=new Point(e.getX(),e.getY());     newLine=new Line(start);     lines.add(newLine);   } } "];
	38 [label="Method: Canvas.mouseDraggedLine(MouseEvent)"];
	39 [label="MethodBody: /**   * Updates the end point coordinates and repaints figure   */ public void mouseDraggedLine(MouseEvent e){   newLine.setEnd(new Point(e.getX(),e.getY()));   repaint(); } "];
	80 [label="Method: Main.actionPerformed(ActionEvent)"];
	81 [label="MethodBody: public void actionPerformed(ActionEvent e){   canvas.selectedFigure(Canvas.FigureTypes.LINE); } "];
	82 [label="Method: Main.actionPerformed(ActionEvent)"];
	83 [label="MethodBody: public void actionPerformed(ActionEvent e){   canvas.wipe(); } "];
	40 [label="Method: Canvas.mouseReleasedLine(MouseEvent)"];
	84 [label="Method: Main.init()"];
	41 [label="MethodBody: /**   * Clears the reference to the new line   */ public void mouseReleasedLine(MouseEvent e){   newLine=null; } "];
	85 [label="MethodBody: public void init(){   initAtoms();   initLayout();   initContentPane();   initListeners(); } "];
	42 [label="CompilationUnit: defaultPackage Line.java"];
	86 [label="Method: Main.Main(String)"];
	43 [label="Import: defaultPackage Line.java java.awt"];
	87 [label="MethodBody: public Main(String appTitle){   super(appTitle);   init();   addWindowListener(new WindowAdapter(){     public void windowClosing(    WindowEvent e){       System.exit(0);     }   } );   setVisible(true);   setSize(WIDTH,HEIGHT);   setResizable(true);   validate(); } "];
	36 -> 8  [label="type"]
	33 -> 32  [label="methodBody"]
	27 -> 26  [label="methodBody"]
	16 -> 8  [label="type"]
	18 -> 8  [label="type"]
	32 -> 8  [label="type"]
	66 -> 62  [label="type"]
	38 -> 8  [label="type"]
	30 -> 8  [label="type"]
	34 -> 8  [label="type"]
	77 -> 76  [label="methodBody"]
	83 -> 82  [label="methodBody"]
	5 -> 0  [label="compilationUnit"]
	64 -> 62  [label="type"]
	62 -> 57  [label="compilationUnit"]
	39 -> 38  [label="methodBody"]
	6 -> 0  [label="compilationUnit"]
	60 -> 57  [label="compilationUnit"]
	58 -> 57  [label="compilationUnit"]
	12 -> 8  [label="type"]
	11 -> 8  [label="type"]
	13 -> 8  [label="type"]
	14 -> 8  [label="type"]
	10 -> 8  [label="type"]
	9 -> 8  [label="type"]
	89 -> 88  [label="methodBody"]
	55 -> 44  [label="type"]
	91 -> 90  [label="methodBody"]
	90 -> 62  [label="type"]
	25 -> 24  [label="methodBody"]
	53 -> 44  [label="type"]
	51 -> 44  [label="type"]
	7 -> 0  [label="compilationUnit"]
	79 -> 78  [label="methodBody"]
	44 -> 42  [label="compilationUnit"]
	73 -> 62  [label="type"]
	50 -> 49  [label="methodBody"]
	43 -> 42  [label="compilationUnit"]
	71 -> 62  [label="type"]
	81 -> 80  [label="methodBody"]
	56 -> 55  [label="methodBody"]
	15 -> 14  [label="methodBody"]
	87 -> 86  [label="methodBody"]
	46 -> 44  [label="type"]
	1 -> 0  [label="compilationUnit"]
	68 -> 62  [label="type"]
	45 -> 44  [label="type"]
	28 -> 8  [label="type"]
	69 -> 62  [label="type"]
	67 -> 62  [label="type"]
	84 -> 62  [label="type"]
	17 -> 16  [label="methodBody"]
	23 -> 22  [label="methodBody"]
	24 -> 8  [label="type"]
	8 -> 0  [label="compilationUnit"]
	22 -> 8  [label="type"]
	65 -> 62  [label="type"]
	26 -> 8  [label="type"]
	82 -> 62  [label="type"]
	20 -> 8  [label="type"]
	2 -> 0  [label="compilationUnit"]
	81 -> 82  [label="methodBody"]
	61 -> 57  [label="compilationUnit"]
	63 -> 62  [label="type"]
	59 -> 57  [label="compilationUnit"]
	41 -> 40  [label="methodBody"]
	78 -> 62  [label="type"]
	35 -> 34  [label="methodBody"]
	3 -> 0  [label="compilationUnit"]
	80 -> 62  [label="type"]
	48 -> 47  [label="methodBody"]
	54 -> 53  [label="methodBody"]
	29 -> 28  [label="methodBody"]
	85 -> 84  [label="methodBody"]
	83 -> 80  [label="methodBody"]
	19 -> 18  [label="methodBody"]
	76 -> 62  [label="type"]
	4 -> 0  [label="compilationUnit"]
	31 -> 30  [label="methodBody"]
	75 -> 74  [label="methodBody"]
	72 -> 71  [label="methodBody"]
	74 -> 62  [label="type"]
	88 -> 62  [label="type"]
	49 -> 44  [label="type"]
	37 -> 36  [label="methodBody"]
	70 -> 62  [label="type"]
	86 -> 62  [label="type"]
	21 -> 20  [label="methodBody"]
	40 -> 8  [label="type"]
	47 -> 44  [label="type"]
	52 -> 51  [label="methodBody"]
}